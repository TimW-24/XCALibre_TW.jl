using Plots, XCALibre,LinearAlgebra, AerofoilOptimisation

chord = 250.0
create_NACA_mesh(
    chord = chord, #[mm]
    α = 0, #[°]
    cutoff = 0.5*(chord/100), #Min thickness of TE [mm]. Default = 0.5 @ 100mm chord; reduce for aerofoils with very thin TE
    vol_size = (16,10), #Total fluid volume size (x,y) in chord multiples [aerofoil located in the vertical centre at the 1/3 position horizontally]
    ratio = 1.2, #Mesh cell size scaling
    BL_thick = 1, #Boundary layer mesh thickness [%c]
    BL_layers = 20, #Boundary layer mesh layers [-]
    BL_stretch = 1.2, #Boundary layer stretch factor (successive multiplication factor of cell thickness away from wall cell) [-]
    py_lines = (14,37,44,248,358,391,405,353), #SALOME python script relevant lines (notebook path, chord line, points line, splines line, BL thickness, foil end BL fidelity, .unv path)
    dat_path = "/home/tim/Documents/MEng Individual Project/Julia/AerofoilOptimisation/foil_dats/ClarkY.dat",
    py_path = "/home/tim/Documents/MEng Individual Project/Julia/AerofoilOptimisation/foil_pythons/NACAMesh.py", #Path to SALOME python script
    salome_path = "/home/tim/Downloads/InstallationFiles/SALOME-9.11.0/mesa_salome", #Path to SALOME installation
    unv_path = "/home/tim/Documents/MEng Individual Project/Julia/XCALibre_TW.jl/unv_sample_meshes/ClarkYMesh.unv", #Path to .unv destination
    note_path = "/home/tim/Documents/MEng Individual Project/SALOME", #Path to SALOME notebook (.hdf) destination
    GUI = false #SALOME GUI selector
)

mesh_file = "unv_sample_meshes/NACAMesh.unv"
mesh = UNV2D_mesh(mesh_file, scale=0.001)
function vel_calc(Re,α,nu,chord)
    vel = [0.0,0.0,0.0]
    Umag = (Re*nu)/(chord*0.001)
    vel[1] = Umag*cos(α[1]*π/180)
    vel[2] = Umag*sin(α[1]*π/180)
    return vel
end #Velocity calculation for given α
# Parameters
Re = 1000000
α = 15 #2.8125 #3.40244
nu,ρ = 1.48e-5,1.225
velocity = vel_calc(Re,α,nu,chord)
νR = 10
Tu = 0.025
k_inlet = 3/2*(Tu*norm(velocity))^2
ω_inlet = k_inlet/(νR*nu)

# Boundary Conditions
noSlip = [0.0, 0.0, 0.0]

model = Physics(
    time = Steady(),
    fluid = Fluid{Incompressible}(nu = nu),
    turbulence = RANS{KOmega}(β⁺=0.09),
    energy = Energy{Isothermal}(),
    domain = mesh
    )

@assign! model momentum U ( 
    XCALibre.Dirichlet(:inlet, velocity),
    Neumann(:outlet, 0.0),
    Neumann(:top, 0.0),
    Neumann(:bottom, 0.0),
    XCALibre.Dirichlet(:foil, noSlip)
)

@assign! model momentum p (
    Neumann(:inlet, 0.0),
    XCALibre.Dirichlet(:outlet, 0.0),
    Neumann(:top, 0.0),
    Neumann(:bottom, 0.0),
    Neumann(:foil, 0.0)
)

@assign! model turbulence k (
    XCALibre.Dirichlet(:inlet, k_inlet),
    Neumann(:outlet, 0.0),
    Neumann(:top, 0.0),
    Neumann(:bottom, 0.0),
    XCALibre.Dirichlet(:foil, 1e-15)
)

@assign! model turbulence omega (
    XCALibre.Dirichlet(:inlet, ω_inlet),
    Neumann(:outlet, 0.0),
    Neumann(:top, 0.0),
    Neumann(:bottom, 0.0),
    OmegaWallFunction(:foil) # need constructor to force keywords
)

@assign! model turbulence nut (
    XCALibre.Dirichlet(:inlet, k_inlet/ω_inlet),
    Neumann(:outlet, 0.0),
    Neumann(:top, 0.0),
    Neumann(:bottom, 0.0), 
    XCALibre.Dirichlet(:foil, 0.0)
)


schemes = (
    U = set_schemes(divergence=Upwind,gradient=Midpoint),
    p = set_schemes(divergence=Upwind),
    k = set_schemes(divergence=Upwind,gradient=Midpoint),
    omega = set_schemes(divergence=Upwind,gradient=Midpoint)
)

solvers = (
    U = set_solver(
        model.momentum.U;
        solver      = BicgstabSolver, # BicgstabSolver, GmresSolver
        preconditioner = Jacobi(),
        convergence = 1e-7,
        relax       = 0.7,
        rtol = 1e-3,
        atol = 1e-10
    ),
    p = set_solver(
        model.momentum.p;
        solver      = CgSolver, # BicgstabSolver, GmresSolver
        preconditioner = Jacobi(),
        convergence = 1e-7,
        relax       = 0.3,
        rtol = 1e-4,
        atol = 1e-10
    ),
    k = set_solver(
        model.turbulence.k;
        solver      = BicgstabSolver, # BicgstabSolver, GmresSolver
        preconditioner = Jacobi(),
        convergence = 1e-7,
        relax       = 0.3,
        rtol = 1e-3,
        atol = 1e-10
    ),
    omega = set_solver(
        model.turbulence.omega;
        solver      = BicgstabSolver, # BicgstabSolver, GmresSolver
        preconditioner = Jacobi(),
        convergence = 1e-7,
        relax       = 0.3,
        rtol = 1e-3,
        atol = 1e-10
    )
)

runtime = set_runtime(iterations=500, write_interval=500, time_step=1)
hardware = set_hardware(backend=CPU(), workgroup=4)
config = Configuration(
    solvers=solvers, schemes=schemes, runtime=runtime, hardware=hardware)

GC.gc()

initialise!(model.momentum.U, velocity)
initialise!(model.momentum.p, 0.0)
initialise!(model.turbulence.k, k_inlet)
initialise!(model.turbulence.omega, ω_inlet)
initialise!(model.turbulence.nut, k_inlet/ω_inlet)

Rx, Ry, Rz, Rp, model_out = run!(model, config) #, pref=0.0)

#%% POST-PROCESSING
let
    plot(; xlims=(0,runtime.iterations), ylims=(1e-10,0))
    plot!(1:length(Rx), Rx, yscale=:log10, label="Ux")
    plot!(1:length(Ry), Ry, yscale=:log10, label="Uy")
    plot!(1:length(Rp), Rp, yscale=:log10, label="p")
end

C_l,C_d = aero_coeffs(:foil, chord, velocity, model, ρ, nu)
aero_eff = lift_to_drag(:foil, model, ρ, nu)

if isnan(aero_eff)
    aero_eff = 0
end

Fp = pressure_force(:foil, model.momentum.p, ρ)

